<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
body {
  margin: 0;
  font-family: Arial, Helvetica, sans-serif;
}

.topnav {
  overflow: hidden;
  background-color: #333;
}

.topnav a {
  float: left;
  color: #f2f2f2;
  text-align: center;
  padding: 14px 16px;
  text-decoration: none;
  font-size: 17px;
}

.topnav a:hover {
  background-color: #ddd;
  color: black;
}

.topnav a.active {
  background-color: #4CAF50;
  color: white;
}

table, th, td {
  border: 1px solid black;
  width: 450px;
  text-align: center;
}

div .DM {
  padding-left: 40%;
}
</style>
</head>
<body>

<div class="topnav">
  <a href="mainPage.htm">Home</a>
  <a href="introduction.htm">Introduction</a>
  <a class="active" href="RDF_DirectMapping.htm">RDF and Direct Mapping</a>
  <a href="SWforHG.htm">Semantic Web for Healthcare and Governments</a>
  <a href="ProsAndCons.htm">Advantages and Disadvantages</a>
  <a href="Alex.htm">Alex</a>
  <a href="Arjun.htm">Arjun</a>
  <a href="Luca.htm">Luca</a>
  <a href="Ruxi.htm">Ruxi</a>
  <a href="Sources.htm">Sources</a>
</div>

<div style="padding-left:16px">
  <center>
    <h2>RDF and Direct Mapping</h2>
  </center>

  <center>
  <p>
    People
  </p>
  <table style="border:3px solid black">
    <tr>
	  <th> ID </th>
	  <th> Name </th>
	  <th> UniNO </th>
	</tr>
	<tr>
	  <td> 01 </td>
	  <td> SMITH </td>
	  <td> 01 </td>
	</tr>
	<tr>
	  <td> 02 </td>
	  <td> JAMES </td>
	  <td> NULL </td>
	</tr>
  </table>

  <h5>
  </h5>

  <p> University </p>
  <table style="border:3px solid black">
    <tr>
	  <th> ID </th>
	  <th> Name </th>
	  <th> Address </th>
	</tr>
	<tr>
	  <td> 01 </td>
	  <td> Imperial </td>
	  <td> SOME ADDRESS </td>
	</tr>
	<tr>
	  <td> 02 </td>
	  <td> UCL </td>
	  <td> NULL </td>
	</tr>
  </table>



  <p> The way this information would be presented as a directed graph is: </p>
  <img src="Arjun/Images/DirectMappingGraph.png" alt="DirectMappingGraph">

  </center>

  <div class="DM">
  <p>
  General Structure </p><p>
  &lt Subject &gt &lt Predicate &gt &lt Definition &gt </p><p>

  @base &lt http://www.someexample.com/ &gt . </p><p>


  &lt People/ID=01 &gt rdf:type &lt People &gt . </p><p>
  &lt People/ID=01 &gt &lt People#ID &gt 01 . </p><p>
  &lt People/ID=01 &gt &lt People#Name &gt "SMITH" . </p><p>
  &lt People/ID=01 &gt &lt People#UniNO &gt 01. </p><p>
  &lt People/ID=01 &gt &lt People#ref-UniNO &gt &lt University/ID=01 &gt . </p><p>

  &lt People/ID=02&gt rdf:type &lt People&gt . </p><p>
  &lt People/ID=02&gt &lt People#ID&gt 02 . </p><p>
  &lt People/ID=02&gt &lt People#Name&gt "JAMES" . </p><p>


  &lt University/ID=01&gt rdf:type &lt University&gt . </p><p>
  &lt University/ID=01&gt &lt University#ID&gt 01 . </p><p>
  &lt University/ID=01&gt &lt University#Name&gt "Imperial" . </p><p>
  &lt University/ID=01&gt &lt University#Address&gt "SOME ADDRESS" . </p><p>

  &lt University/ID=02&gt rdf:type &lt University&gt . </p><p>
  &lt University/ID=02&gt &lt University#ID&gt 02 . </p><p>
  &lt University/ID=02&gt &lt University#NAME&gt "UCL" . </p><p>

  </p>

  </div>

  <div style="padding: 0% 15%">
  <p>
  So what we do is we take each row in the table and create a triple with a common subject.
  The @base notation tells us what domain we will be using and we will append the subject to the base.
  We know which subject we are talking about because of the Unique Identifier (PK), in this case ID.
  The predicate is again constructed by appending something to the base, in this case the table name followed by the column name.
  The definition is either an input or a pointer to another Subject in our graph.
  We start by saying that the Subject is an instance of the class people and then we "say things" about it.
  We should also convert the strings into their safe versions, by replacing characters such as spaces with their percent-encoded counterpart.
  </p>
  </div>


  <center>

  <p> We will now see a different example: </p>

  <p> People </p>
  <table>
    <tr>
	  <th> Name </th>
	  <th> UniNO </th>
	  <th> UniName </th>
	</tr>
	<tr>
	  <td> SMITH </td>
	  <td> 01 </td>
	  <td> Imperial </td>
	</tr>
	<tr>
	  <td> JAMES </td>
	  <td> NULL </td>
	  <td> NULL </td>
	</tr>
  </table>

  <p> University </p>
  <table>
    <tr>
	  <th> ID </th>
	  <th> Name </th>
	  <th> Address </th>
	</tr>
	<tr>
	  <td> 01 </td>
	  <td> Imperial </td>
	  <td> SOME ADDRESS </td>
	</tr>
	<tr>
	  <td> 02 </td>
	  <td> UCL </td>
	  <td> NULL </td>
	</tr>
  </table>


  <p> Let's assume that People has no PK and UniNO and UNIName form a FK that reference University </p>
  <p> The way we reference the table is: </p>

  </center>

  <div class="DM">

  <p>
  @base  &lt http://www.someexample.com/ &gt  . </p>
  <p></p>

  <p>
  _:a rdf:type &lt People &gt .</p><p>
  _:a &lt People#Name &gt "SMITH" .</p><p>
  _:a &lt People#UniNO &gt 01 .</p><p>
  _:a &lt People#UniName &gt "Imperial" .</p><p>
  _:a &lt People#ref-UniNO;UniName &gt &lt University/ID=01 &gt .</p><p>
  </p>

  <p>
  _:b rdf:type &lt People &gt .</p><p>
  _:b &lt People#Name &gt "JAMES" .</p><p>

  </div>

  <center>
    <p> The part for University doesn't change. </p>
    <p> To see more about the direct mapping conventions click
      <a href="https://www.w3.org/TR/rdb-direct-mapping/"> here</a> .</p>
    <h2></h2>
    <h2></h2>
    <h2></h2>
    <h2>SPARQL Queries </h2>
    <div style="padding: 0% 15%">
    <p> In general, a SPARQL query contains a set of triple patterns called a basic graph pattern.
       This structure matches RDF triples with the exception that each component of the triple can be a variable.
       The basic graph pattern is then matched with a subgraph of the RDF data.</p>
    </div>
    <img src="Arjun/Images/SPARQL simple query.bmp" alt="Simple SPARQL Query">
    <div style="padding: 0% 15%">
      <p>One clear advantage SPARQL has over SQL is that it can operate on any database that can be viewed as RDF via a mapping software (such as RDB2RDF),
        while maintaining the same functionality SQL has.
        Another powerful capability of SPARQL that we'll showcase below is that simple graph patterns can be combined,
         in a relatively natural manner,
          in order to explore more elaborate relations in the data. </p>
    </div>
    <h2></h2>
    <h3>A simple union and join example</h3>
    <div style="padding 0% 15%">
      <p>The union of patters 'John'->'has son'-> X and 'John'->'has daughter'-> X
        will have as result all of John's sons and daughters. </p>
    </div>
    <img src="Arjun/Images/SPARQL union.bmp" alt="SPARQL Union">
    <div style="padding: 0% 15%">
      <p>The join of two or more basic graph patterns is called a group graph pattern.
        Unlike the union, join requires that both patters are matched. So, a join of
        'John'->'has son'->Y and 'Y'->'has son'-> 'Z' will have as matching solutions
        the sons of John's son.</p>
  </center>


</div>

</body>
</html>
